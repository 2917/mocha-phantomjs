// Generated by CoffeeScript 1.3.3
(function() {

  describe('Array', function() {
    describe('.push()', function() {
      it('should append a value', function() {
        var arr;
        arr = [];
        arr.push('foo');
        arr.push('bar');
        expect(arr[0]).to.equal('foo');
        return expect(arr[1]).to.equal('bar');
      });
      it('should return the length', function() {
        var arr, n;
        arr = [];
        n = arr.push('foo');
        expect(n).to.equal(1);
        n = arr.push('bar');
        return expect(n).to.equal(2);
      });
      return describe('with many arguments', function() {
        return it('should add the values', function() {
          var arr;
          arr = [];
          arr.push('foo', 'bar');
          expect(arr[0]).to.equal('foo');
          return expect(arr[1]).to.equal('bar');
        });
      });
    });
    describe('.unshift()', function() {
      it('should prepend a value', function() {
        var arr;
        arr = [1, 2, 3];
        arr.unshift('foo');
        expect(arr[0]).to.equal('foo');
        return expect(arr[1]).to.equal(1);
      });
      it('should return the length', function() {
        var arr, n;
        arr = [];
        n = arr.unshift('foo');
        expect(n).to.equal(1);
        n = arr.unshift('bar');
        return expect(n).to.equal(2);
      });
      return describe('with many arguments', function() {
        return it('should add the values', function() {
          var arr;
          arr = [];
          arr.unshift('foo', 'bar');
          expect(arr[0]).to.equal('foo');
          return expect(arr[1]).to.equal('bar');
        });
      });
    });
    describe('.pop()', function() {
      return it('should remove and return the last value', function() {
        var arr;
        arr = [1, 2, 3];
        expect(arr.pop()).to.equal(3);
        expect(arr.pop()).to.equal(2);
        return expect(arr).to.have.length(1);
      });
    });
    return describe('.shift()', function() {
      return it('should remove and return the first value', function() {
        var arr;
        arr = [1, 2, 3];
        expect(arr.shift()).to.equal(1);
        expect(arr.shift()).to.equal(2);
        return expect(arr).to.have.length(1);
      });
    });
  });

}).call(this);
