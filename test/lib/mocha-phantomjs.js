// Generated by CoffeeScript 1.3.3
(function() {

  describe('mocha-phantomjs', function() {
    var expect, spawn;
    expect = require('chai').expect;
    spawn = require('child_process').spawn;
    before(function() {
      this.htmlFile = function(file) {
        return "file://" + (process.cwd()) + "/test/" + file + ".html";
      };
      return this.runner = function(done, args, callback) {
        var phantomArgs, phantomjs, stderr, stdout;
        stdout = '';
        stderr = '';
        phantomArgs = args.slice();
        phantomArgs.unshift("" + (process.cwd()) + "/lib/mocha-phantomjs.coffee");
        phantomjs = spawn('phantomjs', phantomArgs);
        phantomjs.stdout.on('data', function(data) {
          return stdout = stdout.concat(data.toString());
        });
        phantomjs.stderr.on('data', function(data) {
          return stderr = stderr.concat(data.toString());
        });
        return phantomjs.on('exit', function(code) {
          if (typeof callback === "function") {
            callback(code, stdout, stderr);
          }
          return typeof done === "function" ? done() : void 0;
        });
      };
    });
    it('returns a failure code and shows usage when no args are given', function(done) {
      return this.runner(done, [], function(code, stdout, stderr) {
        expect(code).to.equal(1);
        return expect(stdout).to.match(/usage/i);
      });
    });
    it('returns a failure code and notifies of bad url when given one', function(done) {
      return this.runner(done, ['foo/bar.html'], function(code, stdout, stderr) {
        expect(code).to.equal(1);
        expect(stdout).to.match(/failed to load the page/i);
        expect(stdout).to.match(/check the url/i);
        return expect(stdout).to.match(/foo\/bar.html/i);
      });
    });
    /*
      $ phantomjs lib/mocha-phantomjs.coffee test/bdd-spec-passing.html
      $ mocha -r chai/chai.js -u bdd -R spec --globals chai.expect test/lib/bdd-spec-passing.js
      BDD Spec Passing
        ✓ passes 1 
        ✓ passes 2 
        ✓ passes 3 
        - skips 1
        - skips 2
        - skips 3
      ✔ 6 tests complete (4ms)
      • 3 tests pending
    */

    return describe('bdd-spec-passing', function() {
      before(function() {
        return this.args = [this.htmlFile('bdd-spec-passing')];
      });
      it('returns a passing code', function(done) {
        return this.runner(done, this.args, function(code, stdout, stderr) {
          return expect(code).to.equal(0);
        });
      });
      return it('writes all output in color', function(done) {
        return this.runner(done, this.args, function(code, stdout, stderr) {
          expect(stdout).to.match(/BDD Spec Passing/);
          expect(stdout).to.match(/\u001b\[32m\s+✓\u001b\[0m\u001b\[90m passes [1-3]/);
          expect(stdout).to.match(/\u001b\[0m\n\n\n\u001b\[92m\s+✔\u001b\[0m\u001b\[32m 6 tests complete/);
          return expect(stdout).to.match(/\u001b\[36m\s+•\u001b\[0m\u001b\[36m 3 tests pending/);
        });
      });
    });
  });

}).call(this);
